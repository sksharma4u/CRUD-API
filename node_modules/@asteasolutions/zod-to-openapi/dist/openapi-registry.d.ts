import { OperationObject } from 'openapi3-ts';
import type { ZodVoid, ZodObject, ZodSchema, ZodType } from 'zod';
declare type Method = 'get' | 'post' | 'put' | 'delete' | 'patch';
export declare type ResponseConfig = {
    mediaType: string;
    schema: ZodType<unknown>;
} | ZodVoid;
export interface RouteConfig extends OperationObject {
    method: Method;
    path: string;
    request?: {
        body?: ZodType<unknown>;
        params?: ZodObject<any>;
        query?: ZodObject<any>;
        headers?: ZodType<unknown>[];
    };
    responses: {
        [statusCode: string]: ResponseConfig;
    };
}
export declare type OpenAPIDefinitions = {
    type: 'schema';
    schema: ZodSchema<any>;
} | {
    type: 'parameter';
    schema: ZodSchema<any>;
} | {
    type: 'route';
    route: RouteConfig;
};
export declare class OpenAPIRegistry {
    private parents?;
    private _definitions;
    constructor(parents?: OpenAPIRegistry[] | undefined);
    get definitions(): OpenAPIDefinitions[];
    /**
     * Registers a new component schema under /components/schemas/${name}
     */
    register<T extends ZodSchema<any>>(refId: string, zodSchema: T): T;
    /**
     * Registers a new parameter schema under /components/parameters/${name}
     */
    registerParameter<T extends ZodSchema<any>>(refId: string, zodSchema: T): T;
    /**
     * Registers a new path that would be generated under paths:
     */
    registerPath(route: RouteConfig): void;
}
export {};
